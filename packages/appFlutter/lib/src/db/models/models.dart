import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';

import '../MyDbModel.dart';
import '../SqfEntityBase.dart';
import 'restaurants.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Todo.dart into where to use
      - start typing Todo().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(todo) / or toList(todoList)
      - you can select one Todo or List<Todo> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Todo
class Todo {
  // FIELDS
  int id;
  int userId;
  String title;
  bool completed;

  // end FIELDS

  static const bool _softDeleteActivated = false;
  TodoManager __mnTodo;
  TodoFilterBuilder _select;

  TodoManager get _mnTodo {
    if (__mnTodo == null) __mnTodo = new TodoManager();
    return __mnTodo;
  }

  Todo({this.id, this.userId, this.title, this.completed}) {
    setDefaultValues();
  }

  Todo.withFields(this.userId, this.title, this.completed) {
    setDefaultValues();
  }

  Todo.withId(this.id, this.userId, this.title, this.completed) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (userId != null) map["userId"] = userId;
    if (title != null) map["title"] = title;
    if (completed != null)
      map["completed"] = forQuery ? (completed ? 1 : 0) : completed;

    return map;
  }

  Todo.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.userId = o["userId"];
    this.title = o["title"];
    this.completed = o["completed"] != null ? o["completed"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return [id, userId, title, completed];
  }

  static fromWeb(VoidCallback todoList(List<Todo> o)) async {
    fromWebUrl("https://jsonplaceholder.typicode.com/todos", (objList) {
      todoList(objList);
    });
  }

  static fromWebUrl(String url, VoidCallback todoList(List<Todo> o)) async {
    var objList = List<Todo>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((todo) => Todo.fromMap(todo)).toList();
        todoList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Todo.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Todo>> fromObjectList(Future<List<dynamic>> o) async {
    var todosList = new List<Todo>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        todosList.add(Todo.fromMap(data[i]));
      }
    });
    return todosList;
  }

  static List<Todo> fromMapList(List<Map<String, dynamic>> query) {
    List<Todo> todos = List<Todo>();
    for (Map map in query) {
      todos.add(Todo.fromMap(map));
    }
    return todos;
  }

  /// returns Todo by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Todo if exist, otherwise returns null</returns>
  getById(int id, VoidCallback todo(Todo o)) {
    Todo todoObj;
    var todoFuture = _mnTodo.getById(id);
    todoFuture.then((data) {
      if (data.length > 0)
        todoObj = Todo.fromMap(data[0]);
      else
        todoObj = null;
      todo(todoObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnTodo.insert(Todo.withFields(userId, title, completed));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Todo> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Todo> todos) async {
    var results = _mnTodo.saveAll(
        "INSERT OR REPLACE INTO todos (id, userId,title,completed)  VALUES (?,?,?,?)",
        todos);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnTodo.rawInsert(
        "INSERT OR REPLACE INTO todos (id, userId,title,completed)  VALUES (?,?,?,?)",
        [id, userId, title, completed]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Todo> todos) async {
    var results = await _mnTodo.rawInsertAll(
        "INSERT OR REPLACE INTO todos (id, userId,title,completed)  VALUES (?,?,?,?)",
        todos);
    return results;
  }

  /// <summary>
  /// saveAs Todo. Returns a new Primary Key value of Todo
  /// </summary>
  /// <returns>Returns a new Primary Key value of Todo</returns>
  Future<int> saveAs() async {
    id = await _mnTodo.insert(Todo.withFields(userId, title, completed));
    return id;
  }

  /// <summary>
  /// Deletes Todo
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Todo invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnTodo.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnTodo
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  //private TodoFilterBuilder _Select;
  TodoFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new TodoFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  TodoFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    TodoFilterBuilder _distinct = new TodoFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if (completed == null) completed = false;
  }
//end methods
}
// endregion todo

// region TodoField
class TodoField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  TodoFilterBuilder todoFB;

  TodoField(TodoFilterBuilder fb) {
    param = new DbParameter();
    todoFB = fb;
  }

  TodoField get not {
    _waitingNot = " NOT ";
    return this;
  }

  TodoFilterBuilder equals(var pValue) {
    param.expression = "=";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.EQuals,
            todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.NotEQuals,
            todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder isNull() {
    todoFB._addedBlocks = setCriteria(
        0,
        todoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder contains(dynamic pValue) {
    todoFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder startsWith(dynamic pValue) {
    todoFB._addedBlocks = setCriteria(
        pValue + "%",
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder endsWith(dynamic pValue) {
    todoFB._addedBlocks = setCriteria(
        "%" + pValue,
        todoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      todoFB._addedBlocks = setCriteria(
          pFirst,
          todoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          todoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        todoFB._addedBlocks = setCriteria(pFirst, todoFB.parameters, param,
            SqlSyntax.LessThan, todoFB._addedBlocks);
      else
        todoFB._addedBlocks = setCriteria(pFirst, todoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        todoFB._addedBlocks = setCriteria(pLast, todoFB.parameters, param,
            SqlSyntax.GreaterThan, todoFB._addedBlocks);
      else
        todoFB._addedBlocks = setCriteria(pLast, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks);
    }
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.GreaterThan,
            todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param, SqlSyntax.LessThan,
            todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.LessThan,
            todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    todoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, todoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, todoFB._addedBlocks)
        : setCriteria(pValue, todoFB.parameters, param, SqlSyntax.GreaterThan,
            todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }

  TodoFilterBuilder inValues(var pValue) {
    todoFB._addedBlocks = setCriteria(
        pValue,
        todoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        todoFB._addedBlocks);
    _waitingNot = "";
    todoFB._addedBlocks.needEndBlock[todoFB._blockIndex] =
        todoFB._addedBlocks.retVal;
    return todoFB;
  }
}
// endregion TodoField

// region TodoFilterBuilder
class TodoFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Todo _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  TodoFilterBuilder(Todo obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  TodoFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  TodoFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  TodoFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  TodoFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  TodoFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  TodoFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  TodoFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  TodoFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  TodoFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  TodoFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  TodoField setField(TodoField field, String colName, DbType dbtype) {
    field = new TodoField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  TodoField _id;

  TodoField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  TodoField _userId;

  TodoField get userId {
    _userId = setField(_userId, "userId", DbType.integer);
    return _userId;
  }

  TodoField _title;

  TodoField get title {
    _title = setField(_title, "title", DbType.text);
    return _title;
  }

  TodoField _completed;

  TodoField get completed {
    _completed = setField(_completed, "completed", DbType.bool);
    return _completed;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Todo._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Todo> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    if (Todo._softDeleteActivated)
      r = await _obj._mnTodo.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnTodo.delete(qparams);
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnTodo.updateBatch(qparams, values);
  }

  /// This method always returns TodoObj if exist, otherwise returns null
  /// <returns>List<Todo></returns>
  void toSingle(VoidCallback todo(Todo o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnTodo.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        todo(Todo.fromMap(data[0]));
      else
        todo(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback todoCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var todosFuture = await _obj._mnTodo.toList(qparams);
    int count = todosFuture[0]["CNT"];
    todoCount(count);
    return BoolResult(
        success: count > 0,
        successMessage: count > 0 ? "toCount(): $count items found" : "",
        errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<Todo>.
  /// <returns>List<Todo></returns>
  void toList(VoidCallback todoList(List<Todo> o)) async {
    _buildParameters();

    var todosFuture = _obj._mnTodo.toList(qparams);

    List<Todo> todosData = new List<Todo>();
    todosFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        todosData.add(Todo.fromMap(data[i]));
      }
      todoList(todosData);
      todosData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o),
      [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnTodo.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnTodo.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion TodoFilterBuilder

// region TodoFields
class TodoFields {
  static TableField _fId;

  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fUserId;

  static TableField get userId {
    _fUserId = SqlSyntax.setField(_fUserId, "userId", DbType.integer);
    return _fUserId;
  }

  static TableField _fTitle;

  static TableField get title {
    _fTitle = SqlSyntax.setField(_fTitle, "title", DbType.text);
    return _fTitle;
  }

  static TableField _fCompleted;

  static TableField get completed {
    _fCompleted = SqlSyntax.setField(_fCompleted, "completed", DbType.bool);
    return _fCompleted;
  }
}
// endregion TodoFields

//region TodoManager
class TodoManager extends SqfEntityProvider {
  static String _tableName = "todos";
  static String _colId = "id";

  TodoManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
}
//endregion TodoManager
