import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import '../MyDbModel.dart';
import '../SqfEntityBase.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Restaurant.dart into where to use
      - start typing Restaurant().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(product) / or toList(productList)
      - you can select one Restaurant or List<Restaurant> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Restaurant
class Restaurant {
  // FIELDS
  int id;
  String uniqueId;

  String displayName;
  String thumbnailUrl;
  String originalUrl;

  // length(8)
  String address;
  String street_number;
  String route;
  String locality;
  String sublocality;
  String country;
  String postal_code;
  String administrative_area;

  // length(8)-end
  bool isActive;
  bool isDeleted;

  // end FIELDS

// RELATIONSHIPS
//  getCategory(VoidCallback category(Category o)) {
//    Category().getById(categoryId, (obj) {
//      category(obj);
//    });
//  }

  // END RELATIONSHIPS

  static const bool _softDeleteActivated = true;
  RestaurantManager __mnRestaurant;
  RestaurantFilterBuilder _select;

  RestaurantManager get _mnRestaurant {
    if (__mnRestaurant == null) __mnRestaurant = new RestaurantManager();
    return __mnRestaurant;
  }

  Restaurant(
      {this.id,
      this.uniqueId,
      this.originalUrl,
      this.thumbnailUrl,
      this.displayName,
      this.address,
      this.street_number,
      this.route,
      this.locality,
      this.sublocality,
      this.country,
      this.postal_code,
      this.administrative_area}) {
    setDefaultValues();
  }

  Restaurant.withFields(
      this.uniqueId,
      this.originalUrl,
      this.thumbnailUrl,
      this.displayName,
      this.address,
      this.street_number,
      this.route,
      this.locality,
      this.sublocality,
      this.country,
      this.postal_code,
      this.administrative_area) {
    setDefaultValues();
  }

  Restaurant.withId(
      this.id,
      this.uniqueId,
      this.originalUrl,
      this.thumbnailUrl,
      this.displayName,
      this.address,
      this.street_number,
      this.route,
      this.locality,
      this.sublocality,
      this.country,
      this.postal_code,
      this.administrative_area) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
//    if (name != null) map["name"] = name;
//    if (description != null) map["description"] = description;
//    if (price != null) map["price"] = price;
//    if (isActive != null)
//      map["isActive"] = forQuery ? (isActive ? 1 : 0) : isActive;
//    if (categoryId != null) map["categoryId"] = categoryId;
//    if (rownum != null) map["rownum"] = rownum;
//    if (isDeleted != null)
//      map["isDeleted"] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;

    return map;
  }

  Restaurant.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
//    this.name = o["name"];
//    this.description = o["description"];
//    this.price = o["price"];
//    this.isActive = o["isActive"] != null ? o["isActive"] == 1 : null;
//    this.categoryId = o["categoryId"];
//    this.rownum = o["rownum"];
//    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return [
      id,
      uniqueId,
      originalUrl,
      thumbnailUrl,
      displayName,
      address,
      street_number,
      route,
      locality,
      sublocality,
      country,
      postal_code,
      administrative_area
    ];
  }

  static fromWebUrl(
      String url, VoidCallback productList(List<Restaurant> o)) async {
    var objList = List<Restaurant>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((product) => Restaurant.fromMap(product)).toList();
        productList(objList);
      } catch (e) {
        print(
            "SQFENTITY ERROR Restaurant.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Restaurant>> fromObjectList(
      Future<List<dynamic>> o) async {
    var productsList = new List<Restaurant>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        productsList.add(Restaurant.fromMap(data[i]));
      }
    });
    return productsList;
  }

  static List<Restaurant> fromMapList(List<Map<String, dynamic>> query) {
    List<Restaurant> products = List<Restaurant>();
    for (Map map in query) {
      products.add(Restaurant.fromMap(map));
    }
    return products;
  }

  /// returns Restaurant by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Restaurant if exist, otherwise returns null</returns>
  getById(int id, VoidCallback product(Restaurant o)) {
    Restaurant productObj;
    var productFuture = _mnRestaurant.getById(id);
    productFuture.then((data) {
      if (data.length > 0)
        productObj = Restaurant.fromMap(data[0]);
      else
        productObj = null;
      product(productObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0) {
//      id = await _mnRestaurant.insert(Restaurant.withFields(
//          uniqueId,
//          originalUrl,
//          thumbnailUrl,
//          displayName,
//          address,
//          street_number,
//          route,
//          locality,
//          sublocality,
//          country,
//          postal_code,
//          administrative_area));
      id = await _onlyInsert();
    } else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Restaurant> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Restaurant> products) async {
    var results = _mnRestaurant.saveAll(
        "INSERT OR REPLACE INTO restaurant ("
        "id,uniqueId,originalUrl,thumbnailUrl,displayName,address,street_number,route,locality,sublocality,country,postal_code,administrative_area"
        ")  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
        products);
    return results;
  }

  /// <summary>
  /// only insert if the record not exists
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _onlyInsert() async {
    id = await _mnRestaurant.rawInsert(
        "INSERT OR REPLACE INTO restaurant ("
        "uniqueId,originalUrl,thumbnailUrl,displayName,address,street_number,route,locality,sublocality,country,postal_code,administrative_area"
        ")  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
        [
          uniqueId,
          originalUrl,
          thumbnailUrl,
          displayName,
          address,
          street_number,
          route,
          locality,
          sublocality,
          country,
          postal_code,
          administrative_area
        ]);
    return id;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnRestaurant.rawInsert(
        "INSERT OR REPLACE INTO restaurant ("
        "id,uniqueId,originalUrl,thumbnailUrl,displayName,address,street_number,route,locality,sublocality,country,postal_code,administrative_area"
        ")  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)",
        [
          id,
          uniqueId,
          originalUrl,
          thumbnailUrl,
          displayName,
          address,
          street_number,
          route,
          locality,
          sublocality,
          country,
          postal_code,
          administrative_area
        ]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Restaurant> products) async {
    var results = await _mnRestaurant.rawInsertAll(
        "INSERT OR REPLACE INTO restaurant (id, name,description,price,isActive,categoryId,rownum,isDeleted)  VALUES (?,?,?,?,?,?,?,?)",
        products);
    return results;
  }

  /// <summary>
  /// saveAs Restaurant. Returns a new Primary Key value of Restaurant
  /// </summary>
  /// <returns>Returns a new Primary Key value of Restaurant</returns>
  Future<int> saveAs() async {
    id = await _mnRestaurant.insert(Restaurant.withFields(
        uniqueId,
        originalUrl,
        thumbnailUrl,
        displayName,
        address,
        street_number,
        route,
        locality,
        sublocality,
        country,
        postal_code,
        administrative_area));
    return id;
  }

  /// <summary>
  /// Deletes Restaurant
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Restaurant invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnRestaurant.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnRestaurant
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  /// <summary>
  /// Recover Restaurant
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Restaurant invoked (id=$id)");
    return _mnRestaurant
        .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});
  }

  //private RestaurantFilterBuilder _Select;
  RestaurantFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new RestaurantFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  RestaurantFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    RestaurantFilterBuilder _distinct = new RestaurantFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
//    if (price == null) price = 0;
    if (isActive == null) isActive = false;
//    if (categoryId == null) categoryId = 0;
//    if (rownum == null) rownum = 0;
    if (isDeleted == null) isDeleted = false;
  }
//end methods
}
// endregion product

// region RestaurantField
class RestaurantField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  RestaurantFilterBuilder productFB;

  RestaurantField(RestaurantFilterBuilder fb) {
    param = new DbParameter();
    productFB = fb;
  }

  RestaurantField get not {
    _waitingNot = " NOT ";
    return this;
  }

  RestaurantFilterBuilder equals(var pValue) {
    param.expression = "=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.EQuals,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.NotEQuals,
            productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder isNull() {
    productFB._addedBlocks = setCriteria(
        0,
        productFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder contains(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder startsWith(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        pValue + "%",
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder endsWith(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        "%" + pValue,
        productFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      productFB._addedBlocks = setCriteria(
          pFirst,
          productFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          productFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.LessThan, productFB._addedBlocks);
      else
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
      else
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    }
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    productFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  RestaurantFilterBuilder inValues(var pValue) {
    productFB._addedBlocks = setCriteria(
        pValue,
        productFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = "";
    productFB._addedBlocks.needEndBlock[productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }
}
// endregion RestaurantField

// region RestaurantFilterBuilder
class RestaurantFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Restaurant _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  RestaurantFilterBuilder(Restaurant obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  RestaurantFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  RestaurantFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  RestaurantFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  RestaurantFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  RestaurantFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  RestaurantFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  RestaurantFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  RestaurantFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  RestaurantFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  RestaurantFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  RestaurantField setField(
      RestaurantField field, String colName, DbType dbtype) {
    field = new RestaurantField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  RestaurantField _id;

  RestaurantField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  RestaurantField _name;

  RestaurantField get name {
    _name = setField(_name, "name", DbType.text);
    return _name;
  }

  RestaurantField _description;

  RestaurantField get description {
    _description = setField(_description, "description", DbType.text);
    return _description;
  }

  RestaurantField _price;

  RestaurantField get price {
    _price = setField(_price, "price", DbType.real);
    return _price;
  }

  RestaurantField _isActive;

  RestaurantField get isActive {
    _isActive = setField(_isActive, "isActive", DbType.bool);
    return _isActive;
  }

  RestaurantField _categoryId;

  RestaurantField get categoryId {
    _categoryId = setField(_categoryId, "categoryId", DbType.integer);
    return _categoryId;
  }

  RestaurantField _rownum;

  RestaurantField get rownum {
    _rownum = setField(_rownum, "rownum", DbType.integer);
    return _rownum;
  }

  RestaurantField _isDeleted;

  RestaurantField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Restaurant._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Restaurant> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    if (Restaurant._softDeleteActivated)
      r = await _obj._mnRestaurant.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnRestaurant.delete(qparams);
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Restaurant batch invoked");
    return _obj._mnRestaurant.updateBatch(qparams, {"isDeleted": 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnRestaurant.updateBatch(qparams, values);
  }

  /// This method always returns RestaurantObj if exist, otherwise returns null
  /// <returns>List<Restaurant></returns>
  void toSingle(VoidCallback product(Restaurant o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnRestaurant.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        product(Restaurant.fromMap(data[0]));
      else
        product(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback productCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var productsFuture = await _obj._mnRestaurant.toList(qparams);
    int count = productsFuture[0]["CNT"];
    productCount(count);
    return BoolResult(
        success: count > 0,
        successMessage: count > 0 ? "toCount(): $count items found" : "",
        errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<Restaurant>.
  /// <returns>List<Restaurant></returns>
  void toList(VoidCallback productList(List<Restaurant> o)) async {
    _buildParameters();

    var productsFuture = _obj._mnRestaurant.toList(qparams);

    List<Restaurant> productsData = new List<Restaurant>();
    productsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        productsData.add(Restaurant.fromMap(data[i]));
      }
      productList(productsData);
      productsData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o),
      [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnRestaurant.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnRestaurant.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion RestaurantFilterBuilder

// region RestaurantFields
class RestaurantFields {
  static TableField _fId;

  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fName;

  static TableField get name {
    _fName = SqlSyntax.setField(_fName, "name", DbType.text);
    return _fName;
  }

  static TableField _fDescription;

  static TableField get description {
    _fDescription =
        SqlSyntax.setField(_fDescription, "description", DbType.text);
    return _fDescription;
  }

  static TableField _fPrice;

  static TableField get price {
    _fPrice = SqlSyntax.setField(_fPrice, "price", DbType.real);
    return _fPrice;
  }

  static TableField _fIsActive;

  static TableField get isActive {
    _fIsActive = SqlSyntax.setField(_fIsActive, "isActive", DbType.bool);
    return _fIsActive;
  }

  static TableField _fCategoryId;

  static TableField get categoryId {
    _fCategoryId =
        SqlSyntax.setField(_fCategoryId, "categoryId", DbType.integer);
    return _fCategoryId;
  }

  static TableField _fRownum;

  static TableField get rownum {
    _fRownum = SqlSyntax.setField(_fRownum, "rownum", DbType.integer);
    return _fRownum;
  }

  static TableField _fIsDeleted;

  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }
}
// endregion RestaurantFields

//region RestaurantManager
class RestaurantManager extends SqfEntityProvider {
  static String _tableName = "restaurant";
  static String _colId = "id";

  RestaurantManager()
      : super(MyDbModel(), tableName: _tableName, colId: _colId);
}
//endregion RestaurantManager
