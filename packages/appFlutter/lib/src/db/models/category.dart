import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import '../MyDbModel.dart';
import '../SqfEntityBase.dart';
import 'restaurants.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Category.dart into where to use
      - start typing Category().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(category) / or toList(categoryList)
      - you can select one Category or List<Category> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Category

class Category {
  // FIELDS
  int id;
  String name;
  bool isActive;
  bool isDeleted;

  // end FIELDS

// COLLECTIONS
  getProducts(VoidCallback productList(List<Restaurant> o)) {
    Restaurant().select().categoryId.equals(id).toList((objList) {
      productList(objList);
    });
  }

  // END COLLECTIONS

  static const bool _softDeleteActivated = true;
  CategoryManager __mnCategory;
  CategoryFilterBuilder _select;

  CategoryManager get _mnCategory {
    if (__mnCategory == null) __mnCategory = new CategoryManager();
    return __mnCategory;
  }

  Category({this.id, this.name, this.isActive, this.isDeleted}) {
    setDefaultValues();
  }

  Category.withFields(this.name, this.isActive, this.isDeleted) {
    setDefaultValues();
  }

  Category.withId(this.id, this.name, this.isActive, this.isDeleted) {
    setDefaultValues();
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;
    if (name != null) map["name"] = name;
    if (isActive != null)
      map["isActive"] = forQuery ? (isActive ? 1 : 0) : isActive;
    if (isDeleted != null)
      map["isDeleted"] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;

    return map;
  }

  Category.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.name = o["name"];
    this.isActive = o["isActive"] != null ? o["isActive"] == 1 : null;
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return [id, name, isActive, isDeleted];
  }

  static fromWebUrl(
      String url, VoidCallback categoryList(List<Category> o)) async {
    var objList = List<Category>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((category) => Category.fromMap(category)).toList();
        categoryList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Category.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Category>> fromObjectList(Future<List<dynamic>> o) async {
    var categorysList = new List<Category>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        categorysList.add(Category.fromMap(data[i]));
      }
    });
    return categorysList;
  }

  static List<Category> fromMapList(List<Map<String, dynamic>> query) {
    List<Category> categorys = List<Category>();
    for (Map map in query) {
      categorys.add(Category.fromMap(map));
    }
    return categorys;
  }

  /// returns Category by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Category if exist, otherwise returns null</returns>
  getById(int id, VoidCallback category(Category o)) {
    Category categoryObj;
    var categoryFuture = _mnCategory.getById(id);
    categoryFuture.then((data) {
      if (data.length > 0)
        categoryObj = Category.fromMap(data[0]);
      else
        categoryObj = null;
      category(categoryObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnCategory
          .insert(Category.withFields(name, isActive, isDeleted));
    else
      id = await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Category> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Category> categories) async {
    var results = _mnCategory.saveAll(
        "INSERT OR REPLACE INTO category (id, name,isActive,isDeleted)  VALUES (?,?,?,?)",
        categories);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnCategory.rawInsert(
        "INSERT OR REPLACE INTO category (id, name,isActive,isDeleted)  VALUES (?,?,?,?)",
        [id, name, isActive, isDeleted]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Category> categories) async {
    var results = await _mnCategory.rawInsertAll(
        "INSERT OR REPLACE INTO category (id, name,isActive,isDeleted)  VALUES (?,?,?,?)",
        categories);
    return results;
  }

  /// <summary>
  /// saveAs Category. Returns a new Primary Key value of Category
  /// </summary>
  /// <returns>Returns a new Primary Key value of Category</returns>
  Future<int> saveAs() async {
    id = await _mnCategory
        .insert(Category.withFields(name, isActive, isDeleted));
    return id;
  }

  /// <summary>
  /// Deletes Category
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Category invoked (id=$id)");
    var result = BoolResult();
    result = await Restaurant().select().categoryId.equals(id).delete();
    if (!result.success)
      return result;
    else if (!_softDeleteActivated)
      return _mnCategory.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnCategory
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }

  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Category invoked (id=$id)");
    var result = BoolResult();
    result = await Restaurant()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .categoryId
        .equals(id)
        .update({"isDeleted": 0});
    if (!result.success)
      return result;
    else
      return _mnCategory
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});
  }

  //private CategoryFilterBuilder _Select;
  CategoryFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new CategoryFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  CategoryFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    CategoryFilterBuilder _distinct = new CategoryFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if (isActive == null) isActive = false;
    if (isDeleted == null) isDeleted = false;
  }
//end methods
}
// endregion category

// region CategoryField
class CategoryField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  CategoryFilterBuilder categoryFB;

  CategoryField(CategoryFilterBuilder fb) {
    param = new DbParameter();
    categoryFB = fb;
  }

  CategoryField get not {
    _waitingNot = " NOT ";
    return this;
  }

  CategoryFilterBuilder equals(var pValue) {
    param.expression = "=";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.EQuals,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.NotEQuals,
            categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder isNull() {
    categoryFB._addedBlocks = setCriteria(
        0,
        categoryFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder contains(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        categoryFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder startsWith(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        pValue + "%",
        categoryFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder endsWith(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        "%" + pValue,
        categoryFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      categoryFB._addedBlocks = setCriteria(
          pFirst,
          categoryFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          categoryFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.LessThan, categoryFB._addedBlocks);
      else
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.GreaterThan, categoryFB._addedBlocks);
      else
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
    }
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    categoryFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder inValues(var pValue) {
    categoryFB._addedBlocks = setCriteria(
        pValue,
        categoryFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = "";
    categoryFB._addedBlocks.needEndBlock[categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }
}
// endregion CategoryField

// region CategoryFilterBuilder
class CategoryFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Category _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  CategoryFilterBuilder(Category obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  CategoryFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  CategoryFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  CategoryFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  CategoryFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  CategoryFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  CategoryFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  CategoryFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  CategoryFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  CategoryFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  CategoryFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  CategoryField setField(CategoryField field, String colName, DbType dbtype) {
    field = new CategoryField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  CategoryField _id;

  CategoryField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  CategoryField _name;

  CategoryField get name {
    _name = setField(_name, "name", DbType.text);
    return _name;
  }

  CategoryField _isActive;

  CategoryField get isActive {
    _isActive = setField(_isActive, "isActive", DbType.bool);
    return _isActive;
  }

  CategoryField _isDeleted;

  CategoryField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Category._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Category> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r = BoolResult();
    toListPrimaryKey((idList) {
      Restaurant().select().categoryId.inValues(idList).delete();
    }, false);

    if (Category._softDeleteActivated)
      r = await _obj._mnCategory.updateBatch(qparams, {"isDeleted": 1});
    else
      r = await _obj._mnCategory.delete(qparams);
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Category batch invoked");
    toListPrimaryKey((idList) {
      Restaurant()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .categoryId
          .inValues(idList)
          .update({"isDeleted": 0});
    }, false);
    return _obj._mnCategory.updateBatch(qparams, {"isDeleted": 0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnCategory.updateBatch(qparams, values);
  }

  /// This method always returns CategoryObj if exist, otherwise returns null
  /// <returns>List<Category></returns>
  void toSingle(VoidCallback category(Category o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnCategory.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        category(Category.fromMap(data[0]));
      else
        category(null);
    });
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback categoryCount(int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var categoriesFuture = await _obj._mnCategory.toList(qparams);
    int count = categoriesFuture[0]["CNT"];
    categoryCount(count);
    return BoolResult(
        success: count > 0,
        successMessage: count > 0 ? "toCount(): $count items found" : "",
        errorMessage: count > 0 ? "" : "toCount(): no items found");
  }

  /// This method always returns List<Category>.
  /// <returns>List<Category></returns>
  void toList(VoidCallback categoryList(List<Category> o)) async {
    _buildParameters();

    var categoriesFuture = _obj._mnCategory.toList(qparams);

    List<Category> categoriesData = new List<Category>();
    categoriesFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        categoriesData.add(Category.fromMap(data[i]));
      }
      categoryList(categoriesData);
      categoriesData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList(List<int> o),
      [bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns = ["id"];
    var idFuture = await _obj._mnCategory.toList(qparams);

    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList(idData);
    return idData;
  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnCategory.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });
  }
}
// endregion CategoryFilterBuilder

// region CategoryFields
class CategoryFields {
  static TableField _fId;

  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fName;

  static TableField get name {
    _fName = SqlSyntax.setField(_fName, "name", DbType.text);
    return _fName;
  }

  static TableField _fIsActive;

  static TableField get isActive {
    _fIsActive = SqlSyntax.setField(_fIsActive, "isActive", DbType.bool);
    return _fIsActive;
  }

  static TableField _fIsDeleted;

  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }
}
// endregion CategoryFields

//region CategoryManager
class CategoryManager extends SqfEntityProvider {
  static String _tableName = "category";
  static String _colId = "id";

  CategoryManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
}
//endregion CategoryManager
