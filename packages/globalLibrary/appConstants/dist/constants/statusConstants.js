"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StatusConstants = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _tools = require("@app/tools");

var Types = _interopRequireWildcard(require("../index"));

var StatusConstants = /*#__PURE__*/function () {
  function StatusConstants() {
    (0, _classCallCheck2["default"])(this, StatusConstants);
  }

  (0, _createClass2["default"])(StatusConstants, null, [{
    key: "getDefaultReviewSort",
    value: function getDefaultReviewSort() {
      return StatusConstants.SORT_TAGS[StatusConstants.reviewDefaultSortTag];
    }
  }, {
    key: "getSortTag",
    value: function getSortTag(sort) {
      return _tools.UnderscoreUtils.invertObject(StatusConstants.SORT_TAGS)[sort];
    }
  }, {
    key: "adjustCloudinaryAndEmbedlyUrl",
    value: function adjustCloudinaryAndEmbedlyUrl(source) {
      return source;
    }
  }]);
  return StatusConstants;
}();

exports.StatusConstants = StatusConstants;
StatusConstants.fetchedGoogleReverseModelError = 'Reverse Geocode failure!';
StatusConstants.reviewDefaultSortTag = 'REVIEW_SORT_NORMAL';
StatusConstants.SORT_TAGS = {
  REVIEW_SORT_NORMAL: 'normal',
  REVIEW_SORT_NEWEST: 'newest',
  REVIEW_SORT_OLDEST: 'oldest',
  REVIEW_SORT_HIGHEST: 'highest',
  REVIEW_SORT_LOWEST: 'lowest'
};
StatusConstants.FLAGS = {
  FLAGS_STATUS_SUBMITTED: '1',
  FLAGS_STATUS_DELETED: '0'
};
StatusConstants.parseObjectFlags = {
  PARSE_OBJECT_FLAG_NORMAL: StatusConstants.FLAGS.FLAGS_STATUS_SUBMITTED,
  PARSE_OBJECT_FLAG_REMOVED: StatusConstants.FLAGS.FLAGS_STATUS_DELETED
};
StatusConstants.appDefaultLoginType = 'email';
StatusConstants.APP_DEFAULT_USER = {
  id: 'default-00001',
  uniqueId: 'unique-00001',
  username: 'Politicl',
  slug: 'politicl',
  displayName: 'user',
  email: '',
  loginType: StatusConstants.appDefaultLoginType,
  createdAt: new Date(),
  updatedAt: new Date(),
  syncPostedAt: new Date(),
  flag: StatusConstants.FLAGS.FLAGS_STATUS_SUBMITTED,
  facebookLinked: false,
  twitterLinked: false,
  objectSchemaName: Types.model.PARSE_USERS
};
StatusConstants.USERS = {
  TYPE_EMAIL: 1,
  TYPE_TWITTER: 2,
  TYPE_FACEBOOK: 3,
  TYPE_GOOGLE: 4,
  TYPE_GITHUB: 5,
  TYPE_LINKEDIN: 6,
  TYPE_TITLES: ['', 'email', 'twiter', 'facebook', 'google', 'github', 'linkedin']
};
StatusConstants.emptyLocation = {
  latitude: 0,
  longitude: 0
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdGFudHMvc3RhdHVzQ29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbIlN0YXR1c0NvbnN0YW50cyIsIlNPUlRfVEFHUyIsInJldmlld0RlZmF1bHRTb3J0VGFnIiwic29ydCIsIlVuZGVyc2NvcmVVdGlscyIsImludmVydE9iamVjdCIsInNvdXJjZSIsImZldGNoZWRHb29nbGVSZXZlcnNlTW9kZWxFcnJvciIsIlJFVklFV19TT1JUX05PUk1BTCIsIlJFVklFV19TT1JUX05FV0VTVCIsIlJFVklFV19TT1JUX09MREVTVCIsIlJFVklFV19TT1JUX0hJR0hFU1QiLCJSRVZJRVdfU09SVF9MT1dFU1QiLCJGTEFHUyIsIkZMQUdTX1NUQVRVU19TVUJNSVRURUQiLCJGTEFHU19TVEFUVVNfREVMRVRFRCIsInBhcnNlT2JqZWN0RmxhZ3MiLCJQQVJTRV9PQkpFQ1RfRkxBR19OT1JNQUwiLCJQQVJTRV9PQkpFQ1RfRkxBR19SRU1PVkVEIiwiYXBwRGVmYXVsdExvZ2luVHlwZSIsIkFQUF9ERUZBVUxUX1VTRVIiLCJpZCIsInVuaXF1ZUlkIiwidXNlcm5hbWUiLCJzbHVnIiwiZGlzcGxheU5hbWUiLCJlbWFpbCIsImxvZ2luVHlwZSIsImNyZWF0ZWRBdCIsIkRhdGUiLCJ1cGRhdGVkQXQiLCJzeW5jUG9zdGVkQXQiLCJmbGFnIiwiZmFjZWJvb2tMaW5rZWQiLCJ0d2l0dGVyTGlua2VkIiwib2JqZWN0U2NoZW1hTmFtZSIsIlR5cGVzIiwibW9kZWwiLCJQQVJTRV9VU0VSUyIsIlVTRVJTIiwiVFlQRV9FTUFJTCIsIlRZUEVfVFdJVFRFUiIsIlRZUEVfRkFDRUJPT0siLCJUWVBFX0dPT0dMRSIsIlRZUEVfR0lUSFVCIiwiVFlQRV9MSU5LRURJTiIsIlRZUEVfVElUTEVTIiwiZW1wdHlMb2NhdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7SUFFYUEsZTs7Ozs7OzsyQ0FhbUI7QUFDNUIsYUFBT0EsZUFBZSxDQUFDQyxTQUFoQixDQUEwQkQsZUFBZSxDQUFDRSxvQkFBMUMsQ0FBUDtBQUNEOzs7K0JBRWlCQyxJLEVBQU07QUFDdEIsYUFBT0MsdUJBQWdCQyxZQUFoQixDQUE2QkwsZUFBZSxDQUFDQyxTQUE3QyxFQUF3REUsSUFBeEQsQ0FBUDtBQUNEOzs7a0RBY29DRyxNLEVBQWdCO0FBQ25ELGFBQU9BLE1BQVA7QUFDRDs7Ozs7O0FBbkNVTixlLENBQ0pPLDhCLEdBQWlDLDBCO0FBRDdCUCxlLENBR0pFLG9CLEdBQXVCLG9CO0FBSG5CRixlLENBS0pDLFMsR0FBWTtBQUNqQk8sRUFBQUEsa0JBQWtCLEVBQUUsUUFESDtBQUVqQkMsRUFBQUEsa0JBQWtCLEVBQUUsUUFGSDtBQUdqQkMsRUFBQUEsa0JBQWtCLEVBQUUsUUFISDtBQUlqQkMsRUFBQUEsbUJBQW1CLEVBQUUsU0FKSjtBQUtqQkMsRUFBQUEsa0JBQWtCLEVBQUU7QUFMSCxDO0FBTFJaLGUsQ0FxQkphLEssR0FBUTtBQUNiQyxFQUFBQSxzQkFBc0IsRUFBRSxHQURYO0FBRWJDLEVBQUFBLG9CQUFvQixFQUFFO0FBRlQsQztBQXJCSmYsZSxDQTBCSmdCLGdCLEdBQW1CO0FBQ3hCQyxFQUFBQSx3QkFBd0IsRUFBRWpCLGVBQWUsQ0FBQ2EsS0FBaEIsQ0FBc0JDLHNCQUR4QjtBQUV4QkksRUFBQUEseUJBQXlCLEVBQUVsQixlQUFlLENBQUNhLEtBQWhCLENBQXNCRTtBQUZ6QixDO0FBMUJmZixlLENBK0JKbUIsbUIsR0FBc0IsTztBQS9CbEJuQixlLENBcUNKb0IsZ0IsR0FBcUM7QUFDMUNDLEVBQUFBLEVBQUUsRUFBRSxlQURzQztBQUUxQ0MsRUFBQUEsUUFBUSxFQUFFLGNBRmdDO0FBRzFDQyxFQUFBQSxRQUFRLEVBQUUsVUFIZ0M7QUFJMUNDLEVBQUFBLElBQUksRUFBRSxVQUpvQztBQUsxQ0MsRUFBQUEsV0FBVyxFQUFFLE1BTDZCO0FBTTFDQyxFQUFBQSxLQUFLLEVBQUUsRUFObUM7QUFPMUNDLEVBQUFBLFNBQVMsRUFBRTNCLGVBQWUsQ0FBQ21CLG1CQVBlO0FBUTFDUyxFQUFBQSxTQUFTLEVBQUUsSUFBSUMsSUFBSixFQVIrQjtBQVMxQ0MsRUFBQUEsU0FBUyxFQUFFLElBQUlELElBQUosRUFUK0I7QUFVMUNFLEVBQUFBLFlBQVksRUFBRSxJQUFJRixJQUFKLEVBVjRCO0FBVzFDRyxFQUFBQSxJQUFJLEVBQUVoQyxlQUFlLENBQUNhLEtBQWhCLENBQXNCQyxzQkFYYztBQVkxQ21CLEVBQUFBLGNBQWMsRUFBRSxLQVowQjtBQWExQ0MsRUFBQUEsYUFBYSxFQUFFLEtBYjJCO0FBYzFDQyxFQUFBQSxnQkFBZ0IsRUFBRUMsS0FBSyxDQUFDQyxLQUFOLENBQVlDO0FBZFksQztBQXJDakN0QyxlLENBc0RKdUMsSyxHQUFRO0FBQ2JDLEVBQUFBLFVBQVUsRUFBRSxDQURDO0FBRWJDLEVBQUFBLFlBQVksRUFBRSxDQUZEO0FBR2JDLEVBQUFBLGFBQWEsRUFBRSxDQUhGO0FBSWJDLEVBQUFBLFdBQVcsRUFBRSxDQUpBO0FBS2JDLEVBQUFBLFdBQVcsRUFBRSxDQUxBO0FBTWJDLEVBQUFBLGFBQWEsRUFBRSxDQU5GO0FBT2JDLEVBQUFBLFdBQVcsRUFBRSxDQUFDLEVBQUQsRUFBSyxPQUFMLEVBQWMsUUFBZCxFQUF3QixVQUF4QixFQUFvQyxRQUFwQyxFQUE4QyxRQUE5QyxFQUF3RCxVQUF4RDtBQVBBLEM7QUF0REo5QyxlLENBZ0VKK0MsYSxHQUFnQjtBQUNyQkMsRUFBQUEsUUFBUSxFQUFFLENBRFc7QUFFckJDLEVBQUFBLFNBQVMsRUFBRTtBQUZVLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbmRlcnNjb3JlVXRpbHMgfSBmcm9tICdAYXBwL3Rvb2xzJ1xuaW1wb3J0ICogYXMgVHlwZXMgZnJvbSAnLi4vaW5kZXgnXG5cbmV4cG9ydCBjbGFzcyBTdGF0dXNDb25zdGFudHMge1xuICBzdGF0aWMgZmV0Y2hlZEdvb2dsZVJldmVyc2VNb2RlbEVycm9yID0gJ1JldmVyc2UgR2VvY29kZSBmYWlsdXJlISdcblxuICBzdGF0aWMgcmV2aWV3RGVmYXVsdFNvcnRUYWcgPSAnUkVWSUVXX1NPUlRfTk9STUFMJ1xuXG4gIHN0YXRpYyBTT1JUX1RBR1MgPSB7XG4gICAgUkVWSUVXX1NPUlRfTk9STUFMOiAnbm9ybWFsJyxcbiAgICBSRVZJRVdfU09SVF9ORVdFU1Q6ICduZXdlc3QnLFxuICAgIFJFVklFV19TT1JUX09MREVTVDogJ29sZGVzdCcsXG4gICAgUkVWSUVXX1NPUlRfSElHSEVTVDogJ2hpZ2hlc3QnLFxuICAgIFJFVklFV19TT1JUX0xPV0VTVDogJ2xvd2VzdCdcbiAgfVxuXG4gIHN0YXRpYyBnZXREZWZhdWx0UmV2aWV3U29ydCgpIHtcbiAgICByZXR1cm4gU3RhdHVzQ29uc3RhbnRzLlNPUlRfVEFHU1tTdGF0dXNDb25zdGFudHMucmV2aWV3RGVmYXVsdFNvcnRUYWddXG4gIH1cblxuICBzdGF0aWMgZ2V0U29ydFRhZyhzb3J0KSB7XG4gICAgcmV0dXJuIFVuZGVyc2NvcmVVdGlscy5pbnZlcnRPYmplY3QoU3RhdHVzQ29uc3RhbnRzLlNPUlRfVEFHUylbc29ydF1cbiAgfVxuXG4gIHN0YXRpYyBGTEFHUyA9IHtcbiAgICBGTEFHU19TVEFUVVNfU1VCTUlUVEVEOiAnMScsXG4gICAgRkxBR1NfU1RBVFVTX0RFTEVURUQ6ICcwJ1xuICB9XG5cbiAgc3RhdGljIHBhcnNlT2JqZWN0RmxhZ3MgPSB7XG4gICAgUEFSU0VfT0JKRUNUX0ZMQUdfTk9STUFMOiBTdGF0dXNDb25zdGFudHMuRkxBR1MuRkxBR1NfU1RBVFVTX1NVQk1JVFRFRCxcbiAgICBQQVJTRV9PQkpFQ1RfRkxBR19SRU1PVkVEOiBTdGF0dXNDb25zdGFudHMuRkxBR1MuRkxBR1NfU1RBVFVTX0RFTEVURURcbiAgfVxuXG4gIHN0YXRpYyBhcHBEZWZhdWx0TG9naW5UeXBlID0gJ2VtYWlsJ1xuXG4gIHN0YXRpYyBhZGp1c3RDbG91ZGluYXJ5QW5kRW1iZWRseVVybChzb3VyY2U6IHN0cmluZykge1xuICAgIHJldHVybiBzb3VyY2VcbiAgfVxuXG4gIHN0YXRpYyBBUFBfREVGQVVMVF9VU0VSOiBJUGFyc2VNb2RlbFVzZXJzID0ge1xuICAgIGlkOiAnZGVmYXVsdC0wMDAwMScsXG4gICAgdW5pcXVlSWQ6ICd1bmlxdWUtMDAwMDEnLFxuICAgIHVzZXJuYW1lOiAnUG9saXRpY2wnLFxuICAgIHNsdWc6ICdwb2xpdGljbCcsXG4gICAgZGlzcGxheU5hbWU6ICd1c2VyJyxcbiAgICBlbWFpbDogJycsXG4gICAgbG9naW5UeXBlOiBTdGF0dXNDb25zdGFudHMuYXBwRGVmYXVsdExvZ2luVHlwZSxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIHN5bmNQb3N0ZWRBdDogbmV3IERhdGUoKSxcbiAgICBmbGFnOiBTdGF0dXNDb25zdGFudHMuRkxBR1MuRkxBR1NfU1RBVFVTX1NVQk1JVFRFRCxcbiAgICBmYWNlYm9va0xpbmtlZDogZmFsc2UsXG4gICAgdHdpdHRlckxpbmtlZDogZmFsc2UsXG4gICAgb2JqZWN0U2NoZW1hTmFtZTogVHlwZXMubW9kZWwuUEFSU0VfVVNFUlNcbiAgfVxuXG4gIHN0YXRpYyBVU0VSUyA9IHtcbiAgICBUWVBFX0VNQUlMOiAxLFxuICAgIFRZUEVfVFdJVFRFUjogMixcbiAgICBUWVBFX0ZBQ0VCT09LOiAzLFxuICAgIFRZUEVfR09PR0xFOiA0LFxuICAgIFRZUEVfR0lUSFVCOiA1LFxuICAgIFRZUEVfTElOS0VESU46IDYsXG4gICAgVFlQRV9USVRMRVM6IFsnJywgJ2VtYWlsJywgJ3R3aXRlcicsICdmYWNlYm9vaycsICdnb29nbGUnLCAnZ2l0aHViJywgJ2xpbmtlZGluJ11cbiAgfVxuXG4gIHN0YXRpYyBlbXB0eUxvY2F0aW9uID0ge1xuICAgIGxhdGl0dWRlOiAwLFxuICAgIGxvbmdpdHVkZTogMFxuICB9XG59XG4iXX0=