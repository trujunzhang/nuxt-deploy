"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppConstants = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Types = _interopRequireWildcard(require("../types"));

var ServerConstants = _interopRequireWildcard(require("../server"));

var AppConstants = /*#__PURE__*/function () {
  function AppConstants() {
    (0, _classCallCheck2["default"])(this, AppConstants);
  }

  (0, _createClass2["default"])(AppConstants, null, [{
    key: "getRealmRecordSortType",
    value: function getRealmRecordSortType(recordType) {
      return AppConstants.realmObjects[recordType].sort;
    }
  }, {
    key: "ieattaWeb",
    get: function get() {
      return ServerConstants.webDomain;
    }
  }, {
    key: "parseServerURL",
    get: function get() {
      return ServerConstants.getServerURLForParse();
    }
  }]);
  return AppConstants;
}();

exports.AppConstants = AppConstants;
AppConstants.parseApi = {
  applicationId: 'YJ60VCiTAD01YOA3LJtHQlhaLjxiHSsv4mkxKvVM',
  javaScriptKey: '3S9VZj8y9g0Tj1WS64dl19eDJrEVpvckG7uhcXIi',
  masterKey: '87rxX8J0JwaaPSBxY9DdKJEqWXByqE7sShRsX4vg',
  restAPIKey: 'gQTEnIKaDWgZ4UiUZGQqN7qkkvtMCOobQEIb1kYy'
};
AppConstants.realmObjects = {
  // Only access online.
  user: {
    objectSchemaName: Types.model.PARSE_USERS,
    sort: -1,
    relateds: []
  },
  record: {
    objectSchemaName: Types.model.PARSE_RECORDS,
    sort: -1,
    relateds: []
  },
  restaurant: {
    objectSchemaName: Types.model.PARSE_RESTAURANTS,
    sort: 1,
    relateds: []
  },
  event: {
    objectSchemaName: Types.model.PARSE_EVENTS,
    sort: 2,
    relateds: ['restaurant']
  },
  recipe: {
    objectSchemaName: Types.model.PARSE_RECIPES,
    sort: 3,
    relateds: ['restaurant']
  },
  peopleInEvent: {
    objectSchemaName: Types.model.PARSE_PEOPLE_IN_EVENTS,
    sort: 4,
    relateds: ['restaurant', 'event', 'user', 'recipe']
  },
  photo: {
    objectSchemaName: Types.model.PARSE_PHOTOS,
    sort: 5,
    relateds: ['restaurant', 'recipe', 'user']
  },
  review: {
    objectSchemaName: Types.model.PARSE_REVIEWS,
    sort: 6,
    relateds: ['restaurant', 'event', 'recipe']
  }
};
AppConstants.realmTypes = {
  PARSE_RECORDS: 'record',
  PARSE_RESTAURANTS: 'restaurant',
  PARSE_EVENTS: 'event',
  PARSE_PEOPLE_IN_EVENTS: 'peopleInEvent',
  PARSE_USERS: 'user',
  PARSE_RECIPES: 'recipe',
  PARSE_PHOTOS: 'photo',
  PARSE_REVIEWS: 'review'
};
AppConstants.realmObjectTypes = {
  PARSE_RECORDS: 'Records',
  PARSE_RESTAURANTS: 'Restaurants',
  PARSE_EVENTS: 'Events',
  PARSE_PEOPLE_IN_EVENTS: 'PeopleInEvents',
  PARSE_USERS: 'Users',
  PARSE_RECIPES: 'Recipes',
  PARSE_PHOTOS: 'Photos',
  PARSE_REVIEWS: 'Reviews'
};
AppConstants.pageDetailsPages = {
  PARSE_RESTAURANTS: 'Restaurant',
  PARSE_EVENTS: 'Event',
  PARSE_RECORDS: 'Record',
  PARSE_PEOPLE_IN_EVENTS: 'OrderedUser',
  PARSE_USERS: 'User',
  PARSE_RECIPES: 'OrderedRecipe',
  PARSE_PHOTOS: 'Photo',
  PARSE_REVIEWS: 'Review'
};
AppConstants.SubDomainRecipesList = {
  PARSE_RESTAURANTS: 'biz_recipes'
};
AppConstants.SubDomainPhotos = {
  PARSE_RESTAURANTS: 'biz_photos',
  PARSE_RECIPES: 'recipe_photos',
  PARSE_USERS: 'user_local_photos'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,