"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reviews = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _tools = require("@app/tools");

var Types = _interopRequireWildcard(require("@app/types"));

var _photos = require("./photos");

var Reviews = /*#__PURE__*/function () {
  function Reviews() {
    (0, _classCallCheck2["default"])(this, Reviews);
  }

  (0, _createClass2["default"])(Reviews, null, [{
    key: "getHtmlBody",
    value: function getHtmlBody(review) {
      var html = review.body;

      if (html) {
        html = '<p>' + html.replace('\n' + '\n', '</p><p>') + '</p>';
      }

      var htmlBody = {
        __html: html
      };
      return htmlBody;
    }
  }, {
    key: "toDateString",
    value: function toDateString(date) {
      return _tools.MomentUtils.toDateString(date, Reviews.config.dateFormat);
    }
  }, {
    key: "getThumbnailUrlByReviewType",
    value: function getThumbnailUrlByReviewType(review) {
      var objectSchemaName = Types.AppConstants.realmObjects[review.reviewType].objectSchemaName;

      switch (objectSchemaName) {
        case Types.model.PARSE_RESTAURANTS:
          return _photos.Photos.getListThumbnailUrl(review.restaurant);

        case Types.model.PARSE_EVENTS:
          return _photos.Photos.getListThumbnailUrl(review.event.restaurant);

        case Types.model.PARSE_RECIPES:
          return _photos.Photos.getListThumbnailUrl(review.recipe);

        default:
          throw new Error('No matched selected reviewListPageType!');
      }
    }
  }, {
    key: "getCurrentSortArray",
    value: function getCurrentSortArray(reviewListPageType) {
      switch (reviewListPageType) {
        case Types.reviewListPage.REVIEW_LIST_TYPE_NORMAL:
          return [{
            title: 'Normal Sort',
            queryTag: Types.common.REVIEW_SORT_NORMAL
          }, {
            title: 'Newest First',
            queryTag: Types.common.REVIEW_SORT_NEWEST
          }, {
            title: 'Oldest First',
            queryTag: Types.common.REVIEW_SORT_OLDEST
          }, {
            title: 'Highest Rated',
            queryTag: Types.common.REVIEW_SORT_HIGHEST
          }, {
            title: 'Lowest Rated',
            queryTag: Types.common.REVIEW_SORT_LOWEST
          }];

        case Types.reviewListPage.REVIEW_LIST_TYPE_USER_PROFILE_ABOUT:
          return [{
            title: 'Normal Sort',
            queryTag: Types.common.REVIEW_SORT_NORMAL
          }, {
            title: 'Newest First',
            queryTag: Types.common.REVIEW_SORT_NEWEST
          }, {
            title: 'Oldest First',
            queryTag: Types.common.REVIEW_SORT_OLDEST
          }, {
            title: 'Highest Rated',
            queryTag: Types.common.REVIEW_SORT_HIGHEST
          }, {
            title: 'Lowest Rated',
            queryTag: Types.common.REVIEW_SORT_LOWEST
          }];

        default:
          throw new Error('No matched selected reviewListPageType!');
      }
    }
  }, {
    key: "checkCanEditReview",
    value: function checkCanEditReview(_ref) {
      var review = _ref.review,
          currentUser = _ref.currentUser;
      var creator = review.creator;

      if (!!currentUser && !!currentUser.uniqueId && !!creator && !!creator.uniqueId && creator.uniqueId === currentUser.uniqueId) {
        return true;
      }

      return false;
    }
  }, {
    key: "canShowPage",
    value: function canShowPage(_ref2) {
      var forObject = _ref2.forObject,
          pageForm = _ref2.pageForm,
          review = _ref2.review;

      switch (pageForm) {
        case Types.editModel.MODEL_FORM_TYPE_EDIT:
          if (!!forObject && !!review) {
            return true;
          }

          break;

        case Types.editModel.MODEL_FORM_TYPE_NEW:
          if (!!forObject) {
            return true;
          }

          break;
      }

      return false;
    }
  }]);
  return Reviews;
}();

exports.Reviews = Reviews;
Reviews.config = {
  paginationCountPerPage: 2,
  // 6/11/2017
  dateFormat: 'DD/MM/YYYY',
  defaultSortTag: Types.StatusConstants.reviewDefaultSortTag
};
Reviews.RATE_STAR_LABELS = ['Select your rating.', 'Eek! Methinks not.', "Meh. I've experienced better.", 'A-OK.', "Yay! I'm a fan.", 'Woohoo! As good as it gets!'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,