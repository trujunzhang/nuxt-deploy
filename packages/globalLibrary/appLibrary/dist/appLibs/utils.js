"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delayEvent = delayEvent;
exports.getIsMobile = getIsMobile;
exports.range = range;
exports.cloneArray = cloneArray;
exports.cloneObject = cloneObject;

// see: http://stackoverflow.com/questions/1909441/jquery-keyup-delay
var delay = function () {
  var timer = 0;
  return function (callback, ms) {
    clearTimeout(timer);
    timer = setTimeout(callback, ms);
  };
}();

function delayEvent(callback, ms) {
  delay(function () {
    callback();
  }, ms);
}

function random(max, min, exceptions) {
  max = max || 0;
  min = min || 0;
  exceptions = exceptions || [];
  var rand = Math.floor(Math.random() * (max + 1 - min) + min);

  if (exceptions.indexOf(rand) === -1) {
    return rand;
  } else {
    return random(max, min, exceptions);
  }
}

function getIsMobile() {
  var isMobile = false;
  var innerWidth = window.innerWidth;

  try {
    isMobile = !!(window.navigator && window.navigator.standalone || navigator.userAgent.match('CriOS') || navigator.userAgent.match(/mobile/i));
  } catch (ex) {// continue regardless of error
  }

  return isMobile;
}

function range(start, stop, step) {
  if (typeof stop === 'undefined') {
    // one param defined
    stop = start;
    start = 0;
  }

  if (typeof step === 'undefined') {
    step = 1;
  }

  if (step > 0 && start >= stop || step < 0 && start <= stop) {
    return [];
  }

  var result = [];

  for (var i = start; step > 0 ? i < stop : i > stop; i += step) {
    result.push(i);
  }

  return result;
}

function cloneArray(array) {
  return array.slice(0);
}

function cloneObject(object) {
  return Object.assign({}, object);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBMaWJzL3V0aWxzLnRzIl0sIm5hbWVzIjpbImRlbGF5IiwidGltZXIiLCJjYWxsYmFjayIsIm1zIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlbGF5RXZlbnQiLCJyYW5kb20iLCJtYXgiLCJtaW4iLCJleGNlcHRpb25zIiwicmFuZCIsIk1hdGgiLCJmbG9vciIsImluZGV4T2YiLCJnZXRJc01vYmlsZSIsImlzTW9iaWxlIiwiaW5uZXJXaWR0aCIsIndpbmRvdyIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsImV4IiwicmFuZ2UiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwicmVzdWx0IiwiaSIsInB1c2giLCJjbG9uZUFycmF5IiwiYXJyYXkiLCJzbGljZSIsImNsb25lT2JqZWN0Iiwib2JqZWN0IiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0EsSUFBTUEsS0FBSyxHQUFJLFlBQU07QUFDbkIsTUFBSUMsS0FBVSxHQUFHLENBQWpCO0FBQ0EsU0FBTyxVQUFDQyxRQUFELEVBQVdDLEVBQVgsRUFBa0I7QUFDdkJDLElBQUFBLFlBQVksQ0FBQ0gsS0FBRCxDQUFaO0FBQ0FBLElBQUFBLEtBQUssR0FBR0ksVUFBVSxDQUFDSCxRQUFELEVBQVdDLEVBQVgsQ0FBbEI7QUFDRCxHQUhEO0FBSUQsQ0FOYSxFQUFkOztBQVFPLFNBQVNHLFVBQVQsQ0FBb0JKLFFBQXBCLEVBQThCQyxFQUE5QixFQUFrQztBQUN2Q0gsRUFBQUEsS0FBSyxDQUFDLFlBQU07QUFDVkUsSUFBQUEsUUFBUTtBQUNULEdBRkksRUFFRkMsRUFGRSxDQUFMO0FBR0Q7O0FBRUQsU0FBU0ksTUFBVCxDQUFnQkMsR0FBaEIsRUFBcUJDLEdBQXJCLEVBQTBCQyxVQUExQixFQUFzQztBQUNwQ0YsRUFBQUEsR0FBRyxHQUFHQSxHQUFHLElBQUksQ0FBYjtBQUNBQyxFQUFBQSxHQUFHLEdBQUdBLEdBQUcsSUFBSSxDQUFiO0FBQ0FDLEVBQUFBLFVBQVUsR0FBR0EsVUFBVSxJQUFJLEVBQTNCO0FBQ0EsTUFBTUMsSUFBWSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDTCxNQUFMLE1BQWlCQyxHQUFHLEdBQUcsQ0FBTixHQUFVQyxHQUEzQixJQUFrQ0EsR0FBN0MsQ0FBckI7O0FBQ0EsTUFBSUMsVUFBVSxDQUFDSSxPQUFYLENBQW1CSCxJQUFuQixNQUE2QixDQUFDLENBQWxDLEVBQXFDO0FBQ25DLFdBQU9BLElBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPSixNQUFNLENBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxVQUFYLENBQWI7QUFDRDtBQUNGOztBQUVNLFNBQVNLLFdBQVQsR0FBdUI7QUFDNUIsTUFBSUMsUUFBUSxHQUFHLEtBQWY7QUFDQSxNQUFNQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0QsVUFBMUI7O0FBQ0EsTUFBSTtBQUNGRCxJQUFBQSxRQUFRLEdBQUcsQ0FBQyxFQUNURSxNQUFNLENBQUNDLFNBQVAsSUFBcUJELE1BQU0sQ0FBQ0MsU0FBUixDQUEwQkMsVUFBL0MsSUFDQUQsU0FBUyxDQUFDRSxTQUFWLENBQW9CQyxLQUFwQixDQUEwQixPQUExQixDQURBLElBRUFILFNBQVMsQ0FBQ0UsU0FBVixDQUFvQkMsS0FBcEIsQ0FBMEIsU0FBMUIsQ0FIVSxDQUFaO0FBS0QsR0FORCxDQU1FLE9BQU9DLEVBQVAsRUFBVyxDQUNYO0FBQ0Q7O0FBQ0QsU0FBT1AsUUFBUDtBQUNEOztBQUVNLFNBQVNRLEtBQVQsQ0FBZUMsS0FBZixFQUFzQkMsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDO0FBQ3ZDLE1BQUksT0FBT0QsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUMvQjtBQUNBQSxJQUFBQSxJQUFJLEdBQUdELEtBQVA7QUFDQUEsSUFBQUEsS0FBSyxHQUFHLENBQVI7QUFDRDs7QUFDRCxNQUFJLE9BQU9FLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDL0JBLElBQUFBLElBQUksR0FBRyxDQUFQO0FBQ0Q7O0FBQ0QsTUFBS0EsSUFBSSxHQUFHLENBQVAsSUFBWUYsS0FBSyxJQUFJQyxJQUF0QixJQUFnQ0MsSUFBSSxHQUFHLENBQVAsSUFBWUYsS0FBSyxJQUFJQyxJQUF6RCxFQUFnRTtBQUM5RCxXQUFPLEVBQVA7QUFDRDs7QUFDRCxNQUFNRSxNQUFXLEdBQUcsRUFBcEI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUdKLEtBQWIsRUFBb0JFLElBQUksR0FBRyxDQUFQLEdBQVdFLENBQUMsR0FBR0gsSUFBZixHQUFzQkcsQ0FBQyxHQUFHSCxJQUE5QyxFQUFvREcsQ0FBQyxJQUFJRixJQUF6RCxFQUErRDtBQUM3REMsSUFBQUEsTUFBTSxDQUFDRSxJQUFQLENBQVlELENBQVo7QUFDRDs7QUFDRCxTQUFPRCxNQUFQO0FBQ0Q7O0FBRU0sU0FBU0csVUFBVCxDQUFvQkMsS0FBcEIsRUFBZ0M7QUFDckMsU0FBT0EsS0FBSyxDQUFDQyxLQUFOLENBQVksQ0FBWixDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsV0FBVCxDQUFxQkMsTUFBckIsRUFBa0M7QUFDdkMsU0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkYsTUFBbEIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5MDk0NDEvanF1ZXJ5LWtleXVwLWRlbGF5XG5jb25zdCBkZWxheSA9ICgoKSA9PiB7XG4gIGxldCB0aW1lcjogYW55ID0gMFxuICByZXR1cm4gKGNhbGxiYWNrLCBtcykgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIG1zKVxuICB9XG59KSgpXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxheUV2ZW50KGNhbGxiYWNrLCBtcykge1xuICBkZWxheSgoKSA9PiB7XG4gICAgY2FsbGJhY2soKVxuICB9LCBtcylcbn1cblxuZnVuY3Rpb24gcmFuZG9tKG1heCwgbWluLCBleGNlcHRpb25zKSB7XG4gIG1heCA9IG1heCB8fCAwXG4gIG1pbiA9IG1pbiB8fCAwXG4gIGV4Y2VwdGlvbnMgPSBleGNlcHRpb25zIHx8IFtdXG4gIGNvbnN0IHJhbmQ6IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggKyAxIC0gbWluKSArIG1pbilcbiAgaWYgKGV4Y2VwdGlvbnMuaW5kZXhPZihyYW5kKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcmFuZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiByYW5kb20obWF4LCBtaW4sIGV4Y2VwdGlvbnMpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldElzTW9iaWxlKCkge1xuICBsZXQgaXNNb2JpbGUgPSBmYWxzZVxuICBjb25zdCBpbm5lcldpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgdHJ5IHtcbiAgICBpc01vYmlsZSA9ICEhKFxuICAgICAgKHdpbmRvdy5uYXZpZ2F0b3IgJiYgKHdpbmRvdy5uYXZpZ2F0b3IgYXMgYW55KS5zdGFuZGFsb25lKSB8fFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgnQ3JpT1MnKSB8fFxuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvbW9iaWxlL2kpXG4gICAgKVxuICB9IGNhdGNoIChleCkge1xuICAgIC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgfVxuICByZXR1cm4gaXNNb2JpbGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIGlmICh0eXBlb2Ygc3RvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBvbmUgcGFyYW0gZGVmaW5lZFxuICAgIHN0b3AgPSBzdGFydFxuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmICh0eXBlb2Ygc3RlcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdGVwID0gMVxuICB9XG4gIGlmICgoc3RlcCA+IDAgJiYgc3RhcnQgPj0gc3RvcCkgfHwgKHN0ZXAgPCAwICYmIHN0YXJ0IDw9IHN0b3ApKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgY29uc3QgcmVzdWx0OiBhbnkgPSBbXVxuICBmb3IgKGxldCBpID0gc3RhcnQ7IHN0ZXAgPiAwID8gaSA8IHN0b3AgOiBpID4gc3RvcDsgaSArPSBzdGVwKSB7XG4gICAgcmVzdWx0LnB1c2goaSlcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUFycmF5KGFycmF5OiBhbnkpIHtcbiAgcmV0dXJuIGFycmF5LnNsaWNlKDApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU9iamVjdChvYmplY3Q6IGFueSkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb2JqZWN0KVxufVxuIl19