"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CACHE_KEY_FAILING = exports.CACHE_PREFIX = void 0;
var CACHE_PREFIX = 'react-avatar/';
exports.CACHE_PREFIX = CACHE_PREFIX;
var CACHE_KEY_FAILING = 'failing';
exports.CACHE_KEY_FAILING = CACHE_KEY_FAILING;

var hasLocalStorage = function isLocalStorageAvailable() {
  try {
    // tslint:disable-next-line:no-string-literal
    return 'localStorage' in window && window['localStorage'];
  } catch (err) {
    return false;
  }
}();

var _default = {
  set: function set(key, value) {
    // cache not available
    if (!hasLocalStorage) {
      return;
    }

    value = JSON.stringify(value);

    try {
      localStorage.setItem(CACHE_PREFIX + key, value);
    } catch (e) {
      // failsafe for mobile Safari private mode
      console.error(e); // eslint-disable-line no-console
    }
  },
  get: function get(key) {
    var value = localStorage.getItem(CACHE_PREFIX + key);

    if (value) {
      return JSON.parse(value);
    }

    return null;
  },
  sourceFailed: function sourceFailed(source) {
    var cacheList = this.get(CACHE_KEY_FAILING) || []; // already in cache

    if (cacheList.indexOf(source) > -1) {
      return;
    }

    cacheList.push(source); // only keep the last 20 results so we don't fill up local storage

    cacheList = cacheList.slice(-20);
    return this.set(CACHE_KEY_FAILING, cacheList);
  },
  hasSourceFailedBefore: function hasSourceFailedBefore(source) {
    var cacheList = this.get(CACHE_KEY_FAILING) || [];
    return cacheList.indexOf(source) > -1;
  }
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWNoZS50cyJdLCJuYW1lcyI6WyJDQUNIRV9QUkVGSVgiLCJDQUNIRV9LRVlfRkFJTElORyIsImhhc0xvY2FsU3RvcmFnZSIsImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwid2luZG93IiwiZXJyIiwic2V0Iiwia2V5IiwidmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXQiLCJnZXRJdGVtIiwicGFyc2UiLCJzb3VyY2VGYWlsZWQiLCJzb3VyY2UiLCJjYWNoZUxpc3QiLCJpbmRleE9mIiwicHVzaCIsInNsaWNlIiwiaGFzU291cmNlRmFpbGVkQmVmb3JlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFNQSxZQUFZLEdBQUcsZUFBckI7O0FBQ0EsSUFBTUMsaUJBQWlCLEdBQUcsU0FBMUI7OztBQUVQLElBQU1DLGVBQWUsR0FBSSxTQUFTQyx1QkFBVCxHQUFtQztBQUMxRCxNQUFJO0FBQ0Y7QUFDQSxXQUFPLGtCQUFrQkMsTUFBbEIsSUFBNkJBLE1BQUQsQ0FBZ0IsY0FBaEIsQ0FBbkM7QUFDRCxHQUhELENBR0UsT0FBT0MsR0FBUCxFQUFZO0FBQ1osV0FBTyxLQUFQO0FBQ0Q7QUFDRixDQVB1QixFQUF4Qjs7ZUFTZTtBQUNiQyxFQUFBQSxHQURhLGVBQ1RDLEdBRFMsRUFDSUMsS0FESixFQUNnQjtBQUMzQjtBQUNBLFFBQUksQ0FBQ04sZUFBTCxFQUFzQjtBQUNwQjtBQUNEOztBQUVETSxJQUFBQSxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixLQUFmLENBQVI7O0FBRUEsUUFBSTtBQUNGRyxNQUFBQSxZQUFZLENBQUNDLE9BQWIsQ0FBcUJaLFlBQVksR0FBR08sR0FBcEMsRUFBeUNDLEtBQXpDO0FBQ0QsS0FGRCxDQUVFLE9BQU9LLENBQVAsRUFBVTtBQUNWO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjRixDQUFkLEVBRlUsQ0FFTztBQUNsQjtBQUNGLEdBZlk7QUFnQmJHLEVBQUFBLEdBaEJhLGVBZ0JUVCxHQWhCUyxFQWdCSTtBQUNmLFFBQU1DLEtBQUssR0FBR0csWUFBWSxDQUFDTSxPQUFiLENBQXFCakIsWUFBWSxHQUFHTyxHQUFwQyxDQUFkOztBQUVBLFFBQUlDLEtBQUosRUFBVztBQUNULGFBQU9DLElBQUksQ0FBQ1MsS0FBTCxDQUFXVixLQUFYLENBQVA7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDRCxHQXhCWTtBQTBCYlcsRUFBQUEsWUExQmEsd0JBMEJBQyxNQTFCQSxFQTBCYTtBQUN4QixRQUFJQyxTQUFTLEdBQUcsS0FBS0wsR0FBTCxDQUFTZixpQkFBVCxLQUErQixFQUEvQyxDQUR3QixDQUd4Qjs7QUFDQSxRQUFJb0IsU0FBUyxDQUFDQyxPQUFWLENBQWtCRixNQUFsQixJQUE0QixDQUFDLENBQWpDLEVBQW9DO0FBQ2xDO0FBQ0Q7O0FBRURDLElBQUFBLFNBQVMsQ0FBQ0UsSUFBVixDQUFlSCxNQUFmLEVBUndCLENBVXhCOztBQUNBQyxJQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FBQ0csS0FBVixDQUFnQixDQUFDLEVBQWpCLENBQVo7QUFFQSxXQUFPLEtBQUtsQixHQUFMLENBQVNMLGlCQUFULEVBQTRCb0IsU0FBNUIsQ0FBUDtBQUNELEdBeENZO0FBMENiSSxFQUFBQSxxQkExQ2EsaUNBMENTTCxNQTFDVCxFQTBDc0I7QUFDakMsUUFBTUMsU0FBUyxHQUFHLEtBQUtMLEdBQUwsQ0FBU2YsaUJBQVQsS0FBK0IsRUFBakQ7QUFDQSxXQUFPb0IsU0FBUyxDQUFDQyxPQUFWLENBQWtCRixNQUFsQixJQUE0QixDQUFDLENBQXBDO0FBQ0Q7QUE3Q1ksQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBDQUNIRV9QUkVGSVggPSAncmVhY3QtYXZhdGFyLydcbmV4cG9ydCBjb25zdCBDQUNIRV9LRVlfRkFJTElORyA9ICdmYWlsaW5nJ1xuXG5jb25zdCBoYXNMb2NhbFN0b3JhZ2UgPSAoZnVuY3Rpb24gaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSB7XG4gIHRyeSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgcmV0dXJuICdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdyAmJiAod2luZG93IGFzIGFueSlbJ2xvY2FsU3RvcmFnZSddXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59KSgpXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgLy8gY2FjaGUgbm90IGF2YWlsYWJsZVxuICAgIGlmICghaGFzTG9jYWxTdG9yYWdlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuXG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKENBQ0hFX1BSRUZJWCArIGtleSwgdmFsdWUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZmFpbHNhZmUgZm9yIG1vYmlsZSBTYWZhcmkgcHJpdmF0ZSBtb2RlXG4gICAgICBjb25zb2xlLmVycm9yKGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cbiAgfSxcbiAgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShDQUNIRV9QUkVGSVggKyBrZXkpXG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH0sXG5cbiAgc291cmNlRmFpbGVkKHNvdXJjZTogYW55KSB7XG4gICAgbGV0IGNhY2hlTGlzdCA9IHRoaXMuZ2V0KENBQ0hFX0tFWV9GQUlMSU5HKSB8fCBbXVxuXG4gICAgLy8gYWxyZWFkeSBpbiBjYWNoZVxuICAgIGlmIChjYWNoZUxpc3QuaW5kZXhPZihzb3VyY2UpID4gLTEpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNhY2hlTGlzdC5wdXNoKHNvdXJjZSlcblxuICAgIC8vIG9ubHkga2VlcCB0aGUgbGFzdCAyMCByZXN1bHRzIHNvIHdlIGRvbid0IGZpbGwgdXAgbG9jYWwgc3RvcmFnZVxuICAgIGNhY2hlTGlzdCA9IGNhY2hlTGlzdC5zbGljZSgtMjApXG5cbiAgICByZXR1cm4gdGhpcy5zZXQoQ0FDSEVfS0VZX0ZBSUxJTkcsIGNhY2hlTGlzdClcbiAgfSxcblxuICBoYXNTb3VyY2VGYWlsZWRCZWZvcmUoc291cmNlOiBhbnkpIHtcbiAgICBjb25zdCBjYWNoZUxpc3QgPSB0aGlzLmdldChDQUNIRV9LRVlfRkFJTElORykgfHwgW11cbiAgICByZXR1cm4gY2FjaGVMaXN0LmluZGV4T2Yoc291cmNlKSA+IC0xXG4gIH1cbn1cbiJdfQ==